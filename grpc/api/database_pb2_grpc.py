# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import database_pb2 as database__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DatabaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSymbols = channel.unary_stream(
                '/Database/GetSymbols',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=database__pb2.SymbolPair.FromString,
                )
        self.GetSymbol = channel.unary_unary(
                '/Database/GetSymbol',
                request_serializer=database__pb2.Symbol.SerializeToString,
                response_deserializer=database__pb2.SymbolPair.FromString,
                )
        self.UpsertSymbols = channel.stream_unary(
                '/Database/UpsertSymbols',
                request_serializer=database__pb2.SymbolPair.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.InsertPttTrend = channel.unary_unary(
                '/Database/InsertPttTrend',
                request_serializer=database__pb2.TrendWithDefaultDate.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.InsertReunionTrend = channel.unary_unary(
                '/Database/InsertReunionTrend',
                request_serializer=database__pb2.TrendWithDefaultDate.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.InsertTwseOverBought = channel.unary_unary(
                '/Database/InsertTwseOverBought',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.InsertTwseOverSold = channel.unary_unary(
                '/Database/InsertTwseOverSold',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.InsertFugleOverBought = channel.unary_unary(
                '/Database/InsertFugleOverBought',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.InsertFugleOverSold = channel.unary_unary(
                '/Database/InsertFugleOverSold',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )


class DatabaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSymbols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSymbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertSymbols(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertPttTrend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertReunionTrend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertTwseOverBought(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertTwseOverSold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertFugleOverBought(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertFugleOverSold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSymbols': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSymbols,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=database__pb2.SymbolPair.SerializeToString,
            ),
            'GetSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSymbol,
                    request_deserializer=database__pb2.Symbol.FromString,
                    response_serializer=database__pb2.SymbolPair.SerializeToString,
            ),
            'UpsertSymbols': grpc.stream_unary_rpc_method_handler(
                    servicer.UpsertSymbols,
                    request_deserializer=database__pb2.SymbolPair.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'InsertPttTrend': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertPttTrend,
                    request_deserializer=database__pb2.TrendWithDefaultDate.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'InsertReunionTrend': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertReunionTrend,
                    request_deserializer=database__pb2.TrendWithDefaultDate.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'InsertTwseOverBought': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertTwseOverBought,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'InsertTwseOverSold': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertTwseOverSold,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'InsertFugleOverBought': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertFugleOverBought,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'InsertFugleOverSold': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertFugleOverSold,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSymbols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Database/GetSymbols',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            database__pb2.SymbolPair.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/GetSymbol',
            database__pb2.Symbol.SerializeToString,
            database__pb2.SymbolPair.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertSymbols(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Database/UpsertSymbols',
            database__pb2.SymbolPair.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertPttTrend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/InsertPttTrend',
            database__pb2.TrendWithDefaultDate.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertReunionTrend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/InsertReunionTrend',
            database__pb2.TrendWithDefaultDate.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertTwseOverBought(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/InsertTwseOverBought',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertTwseOverSold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/InsertTwseOverSold',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertFugleOverBought(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/InsertFugleOverBought',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertFugleOverSold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/InsertFugleOverSold',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
