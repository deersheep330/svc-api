# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service.api.database_pb2 as database__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DatabaseStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_symbols = channel.unary_stream(
                '/Database/get_symbols',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=database__pb2.SymbolPair.FromString,
                )
        self.get_symbol = channel.unary_unary(
                '/Database/get_symbol',
                request_serializer=database__pb2.Symbol.SerializeToString,
                response_deserializer=database__pb2.SymbolPair.FromString,
                )
        self.upsert_symbols = channel.stream_unary(
                '/Database/upsert_symbols',
                request_serializer=database__pb2.SymbolPair.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.insert_ptt_trend = channel.unary_unary(
                '/Database/insert_ptt_trend',
                request_serializer=database__pb2.TrendWithDefaultDate.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.insert_reunion_trend = channel.unary_unary(
                '/Database/insert_reunion_trend',
                request_serializer=database__pb2.TrendWithDefaultDate.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.insert_twse_over_bought = channel.unary_unary(
                '/Database/insert_twse_over_bought',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.insert_twse_over_sold = channel.unary_unary(
                '/Database/insert_twse_over_sold',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.insert_fugle_over_bought = channel.unary_unary(
                '/Database/insert_fugle_over_bought',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )
        self.insert_fugle_over_sold = channel.unary_unary(
                '/Database/insert_fugle_over_sold',
                request_serializer=database__pb2.BoughtOrSold.SerializeToString,
                response_deserializer=database__pb2.RowCount.FromString,
                )


class DatabaseServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_symbols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_symbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upsert_symbols(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_ptt_trend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_reunion_trend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_twse_over_bought(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_twse_over_sold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_fugle_over_bought(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_fugle_over_sold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_symbols': grpc.unary_stream_rpc_method_handler(
                    servicer.get_symbols,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=database__pb2.SymbolPair.SerializeToString,
            ),
            'get_symbol': grpc.unary_unary_rpc_method_handler(
                    servicer.get_symbol,
                    request_deserializer=database__pb2.Symbol.FromString,
                    response_serializer=database__pb2.SymbolPair.SerializeToString,
            ),
            'upsert_symbols': grpc.stream_unary_rpc_method_handler(
                    servicer.upsert_symbols,
                    request_deserializer=database__pb2.SymbolPair.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'insert_ptt_trend': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_ptt_trend,
                    request_deserializer=database__pb2.TrendWithDefaultDate.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'insert_reunion_trend': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_reunion_trend,
                    request_deserializer=database__pb2.TrendWithDefaultDate.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'insert_twse_over_bought': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_twse_over_bought,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'insert_twse_over_sold': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_twse_over_sold,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'insert_fugle_over_bought': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_fugle_over_bought,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
            'insert_fugle_over_sold': grpc.unary_unary_rpc_method_handler(
                    servicer.insert_fugle_over_sold,
                    request_deserializer=database__pb2.BoughtOrSold.FromString,
                    response_serializer=database__pb2.RowCount.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_symbols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Database/get_symbols',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            database__pb2.SymbolPair.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_symbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/get_symbol',
            database__pb2.Symbol.SerializeToString,
            database__pb2.SymbolPair.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upsert_symbols(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Database/upsert_symbols',
            database__pb2.SymbolPair.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_ptt_trend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_ptt_trend',
            database__pb2.TrendWithDefaultDate.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_reunion_trend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_reunion_trend',
            database__pb2.TrendWithDefaultDate.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_twse_over_bought(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_twse_over_bought',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_twse_over_sold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_twse_over_sold',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_fugle_over_bought(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_fugle_over_bought',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_fugle_over_sold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Database/insert_fugle_over_sold',
            database__pb2.BoughtOrSold.SerializeToString,
            database__pb2.RowCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
